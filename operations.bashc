source lib/bashcfuncs.bashc 
source iputils.bashc

function ensure_int() {
  local VARNAME="$1"
  if ! bashc.is_int "${!VARNAME}"; then
    bashc.finalize 1 "$2"
  fi
}

function ensure_ip() {
  local VARNAME="$1"
  if ! bashc.is_ip "${!VARNAME}"; then
    bashc.finalize 1 "$2"
  fi
}

function ensure_cidr() {
  local VARNAME="$1"
  if ! bashc.is_cidr "${!VARNAME}"; then
    bashc.finalize 1 "$2"
  fi
}

function ensure_simplestr() {
  local VARNAME="$1"
  if [[ ! "$1" =~ ^[a-zA-Z][a-zA-Z0-9_\-]*$ ]]; then
    bashc.finalize 1 "$2"
  fi
}

function test() {
  find_iface_property -n vxlan100 vxlan:id
  find_iface_property -n vxlan100 id
}

function createvxlan() {
  local VNI=
  local LOCALIP=
  local NAMESPACE=
  local MULTICAST_GROUP
  local IFACE_NAME=
  local USEFIRST
  while bashc.parameters_next; do
    PARAM="$(bashc.parameters_current)"
    case "$PARAM" in
      --delete-namespace|-d)
                      DELETE_NAMESPACE=true;;
      --local-ip|-l)  bashc.read_nextparameter LOCALIP;;
      --interface|-i) bashc.read_nextparameter IFACE_NAME;;
      --multicast|-m) 
                      bashc.read_nextparameter MULTICAST_GROUP;;
      --first-interface|-f)
                      USEFIRST=true;;
      *)              [ "$VNI" == "" ] || (usage && bashc.finalize 1 "invalid parameter $PARAM")
                      VNI="$PARAM";;
    esac
  done

  ensure_int VNI "the VLAN network identifier is mandatory and must be integer"

  local GUESSED_IFACE=
  if [ "$LOCALIP" != "" ]; then
    ensure_cidr LOCALIP "the local IP address must be in CIDR format"
    GUESSED_IFACE="$(find_iface_by_property "inet" "$LOCALIP")"
    [ $(bashc.line_count "$GUESSED_IFACE") -ne 1 ] && bashc.finalize 1 "could not get the iface for IP $LOCALIP"
    p_debug "guessed interface $GUESSED_IFACE for ip $LOCALIP"

    if [ "$IFACE_NAME" != "" -a "$IFACE_NAME" != "$GUESSED_IFACE" ]; then
      bashc.finalize 1 "guessed interface ($GUESSED_IFACE) does not match $IFACE_NAME"
    fi
  fi

  local GUESSED_IP=
  if [ "$IFACE_NAME" != "" ]; then
    GUESSED_IP="$(find_iface_property "$IFACE_NAME" inet)"
    [ $? -ne 0 ] && bashc.finalize 1 "$IFACE_NAME is not a valid interface"
    [ $(bashc.line_count "$GUESSED_IP") -ne 1 ] && bashc.finalize 1 "could not guess the IP for interface $IFACE_NAME"
    p_debug "guessed ip $GUESSED_IP for interface $IFACE_NAME"

    if [ "$LOCALIP" != "" -a "$LOCALIP" != "$GUESSED_IP" ]; then
      bashc.finalize 1 "guessed ip ($GUESSED_IP) for interface $IFACE_NAME does not match $LOCALIP"
    fi
  fi

  IFACE_NAME="${IFACE_NAME:-$GUESSED_IFACE}"
  LOCALIP="${LOCALIP:-$GUESSED_IP}"

  if [ "$LOCALIP" == "" -a "$IFACE_NAME" == "" ]; then
    GUESSED_IP="$(find_iface_property inet)"
    [ $? -ne 0 ] && bashc.finalize 1 "could not find any iface to create the vxlan"
    [ "$USEFIRST" != "true" -a $(bashc.line_count "$GUESSED_IP") -ne 1 ] && bashc.finalize 1 "there are multiple interfaces. Please select which one"
    read IFACE_NAME LOCALIP <<< "$GUESSED_IP"
  fi

  if [ "$MULTICAST_GROUP" == "-" ]; then
    MULTICAST_GROUP=239.1.1.$((VNI%10+1))
  fi

  if [ "$MULTICAST_GROUP" != "" ]; then
    ensure_ip MULTICAST_GROUP "the multicast group is not an IP address (use - to guess it)"
  fi

  local CIDR="${LOCALIP#*/}"
  local IP="${LOCALIP%/*}"
  local VXIFACE VXBRNAME VXNAMESPACE
  set_vni_vars "$VNI"

  # If the na
  exec_ns "$VXNAMESPACE" sh -c "" > /dev/null 2> /dev/null
  if [ $? -eq 0 ]; then
    if [ "$DELETE_NAMESPACE" == "true" ]; then
      p_debug "deleting namespace $VXNAMESPACE"
      ip netns delete "$VXNAMESPACE"
    else
      bashc.finalize 1 "namespace $VXNAMESPACE already exists"
    fi
  fi

  # We'll create the namespace
  ip netns add "$VXNAMESPACE"
  exec_ns "$VXNAMESPACE" ip link set lo up

set -x
  if [ "$MULTICAST_GROUP" == "" ]; then
    ip link add $VXIFACE type vxlan id $VNI dstport 0 local $IP
  else
    ip link add $VXIFACE type vxlan id $VNI dstport 0 dev $IFACE_NAME group $MULTICAST_GROUP
  fi &&
  ip link set dev $VXIFACE netns $VXNAMESPACE &&
  exec_ns "$VXNAMESPACE" ip link add $VXBRNAME type bridge &&
  exec_ns "$VXNAMESPACE" ip link set dev $VXIFACE master $VXBRNAME &&
  exec_ns "$VXNAMESPACE" ip link set dev $VXBRNAME up &&
  exec_ns "$VXNAMESPACE" ip link set dev $VXIFACE up
set +x

  bashc.finalize 0 

  bashc.finalize 0 "not implemented"

!<<COMMENT
  ip link add vxlan99 type vxlan id 99 dstport 0 nolearning proxy l2miss l3miss
  ip link add dev br99 type bridge
  ip link set dev vxlan99 master br99
  ip link set dev br99 up
  ip link set dev vxlan99 up
COMMENT

  p_error "not implemented"
}

function addiface() {
  local DEST_NAMESPACE CREATE_NAMESPACE IP BRIDGE
  while bashc.parameters_next; do
    PARAM="$(bashc.parameters_current)"
    case "$PARAM" in
      --bridge|-b)    BRIDGE=true;;
      --ip|-i)        bashc.read_nextparameter IP;;
      --namespace|-n) bashc.read_nextparameter DEST_NAMESPACE;;
      --create|-c)    CREATE_NAMESPACE=true;;
      *)              [ "$VNI" == "" ] || (usage && bashc.finalize 1 "invalid parameter $PARAM")
                      VNI="$PARAM";;
    esac
  done

  [ "$IP" != "" ] && ensure_cidr IP "the IP address must be in CIDR format"
  ensure_int VNI "the VLAN network identifier is mandatory and must be integer"

  local CIDR="${IP#*/}"
  local VXIFACE VXBRNAME VXNAMESPACE
  set_vni_vars "$VNI"
  verify_vxlan_structure "$VNI"

  if [ "$DEST_NAMESPACE" != "" ]; then
    ensure_simplestr DEST_NAMESPACE "$DEST_NAMESPACE is not a valid name for a namespace"
    ip netns exec "$DEST_NAMESPACE" sh -c "" > /dev/null 2> /dev/null
    if [ $? -ne 0 ]; then
      if [ "$CREATE_NAMESPACE" == "true" ]; then
        ip netns add "$DEST_NAMESPACE" &&
        ip netns exec "$DEST_NAMESPACE" ip link set dev lo up
      else
        bashc.finalize 1 "namespace $DEST_NAMESPACE does not exist"
      fi
    fi
  fi

  local VETH_1 VETH_2
  VETH_2="$(find_device_name "$VXNAMESPACE" "veth" "-2")" || 
    bashc.finalize 1 "could not find a interface name"
  VETH_1="${VETH_2::-2}-1"

  p_debug "using interface names $VETH_1 - $VETH_2"

  local BRNAME
  if [ "$BRIDGE" == "true" ]; then
    BRNAME="$(find_device_name "$DEST_NAMESPACE" "br")" || 
      bashc.finalize 1 "could not find a name for the bridge"
  fi

  set -x
  ip link add $VETH_1 mtu 1450 type veth peer name $VETH_2 mtu 1450 &&
  ip link set dev $VETH_2 netns $VXNAMESPACE &&
  exec_ns "$VXNAMESPACE" ip link set dev $VETH_2 master $VXBRNAME up &&
  if [ "$DEST_NAMESPACE" != "" ]; then
    ip link set dev $VETH_1 netns $DEST_NAMESPACE
  fi
  exec_ns "$DEST_NAMESPACE" ip link set dev $VETH_1 up
  if [ "$BRIDGE" == "true" ]; then
    exec_ns "$DEST_NAMESPACE" ip link add "$BRNAME" type bridge
    exec_ns "$DEST_NAMESPACE" ip link set dev "$BRNAME" up
    exec_ns "$DEST_NAMESPACE" ip link set dev "$VETH_1" master "$BRNAME"
  fi
  if [ "$IP" != "" ]; then
    exec_ns "$DEST_NAMESPACE" ip addr add $IP dev $VETH_1
  fi
  set +x
}

function deletevxlan() {
  while bashc.parameters_next; do
    PARAM="$(bashc.parameters_current)"
    case "$PARAM" in
      *)                    usage && bashc.finalize 1 "invalid parameter $PARAM";;
    esac
  done
  p_error "not implemented"
}

function set_vni_vars() {
  local VNI="$1"
  VXIFACE=vxlan${VNI}
  VXBRNAME=br${VXIFACE}
  VXNAMESPACE="vxlan${VNI}"
}

function addhost() {
  local IP
  while bashc.parameters_next; do
    PARAM="$(bashc.parameters_current)"
    case "$PARAM" in
      --ip|-i)        bashc.read_nextparameter IP;;
      *)              [ "$VNI" == "" ] || (usage && bashc.finalize 1 "invalid parameter $PARAM")
                      VNI="$PARAM";;
    esac
  done

  [ "$IP" != "" ] && ensure_cidr IP "the IP address must be in CIDR format"

  local CIDR="${IP#*/}"
  local IP="${IP%/*}"

  local VXIFACE VXBRNAME VXNAMESPACE
  set_vni_vars "$VNI"

  verify_vxlan_structure "$VNI" || bashc.finalize 1 "could not verify the vxlan structure"

  local UDPGROUP
  UDPGROUP="$(find_iface_property -n "$VXNAMESPACE" "$VXIFACE" "vxlan:group")"
  [ "$UDPGROUP" != "" ] && bashc.finalize 1 "this vxlan is multicast based"

set -x
  exec_ns "$VXNAMESPACE" bridge fdb add 00:00:00:00:00:00 dst $IP dev $VXIFACE self permanent static
set +x
  return 0
}

function rmhost() {
  local IP ALLIPS
  while bashc.parameters_next; do
    PARAM="$(bashc.parameters_current)"
    case "$PARAM" in
      --ip|-i)        bashc.read_nextparameter IP;;
      --all|-a)       ALLIPS=true;;
      *)              [ "$VNI" == "" ] || (usage && bashc.finalize 1 "invalid parameter $PARAM")
                      VNI="$PARAM";;
    esac
  done

  [ "$IP" != "" ] && ensure_cidr IP "the IP address must be in CIDR format"

  local CIDR="${IP#*/}"
  local IP="${IP%/*}"
  local VXIFACE VXBRNAME VXNAMESPACE
  set_vni_vars "$VNI"

  verify_vxlan_structure "$VNI" || bashc.finalize 1 "could not verify the vxlan structure"

  local UDPGROUP
  UDPGROUP="$(find_iface_property -n "$VXNAMESPACE" "$VXIFACE" "vxlan:group")"
  [ "$UDPGROUP" != "" ] && bashc.finalize 1 "this vxlan is multicast based"

  if [ "$ALLIPS" == "true" ]; then
    local DSTIP
    local RMIPS=()
    while read; do
      read _ _ DSTIP _ <<< "$REPLY"
      p_debug "to remove $DSTIP"
      bashc.is_ip "$DSTIP" && RMIPS=( "${RMIPS[@]}" $DSTIP)
    done <<< "$(exec_ns "$VXNAMESPACE" bridge fdb show brport "$VXIFACE" | grep '^00:00:00:00:00:00')"
  else
    set -x
    exec_ns "$VXNAMESPACE" bridge fdb del 00:00:00:00:00:00 dst $IP dev $VXIFACE 2> /dev/null
    ERR=$?
    set +x
  fi
  return 0
}